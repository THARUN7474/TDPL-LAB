KINDLY CHECK GITHUB LINK---> MADE A BASIC WEB APPLICATION FOR THIS, USED DIFFERENT MODULES--EXPRESS, SOCKET.IO ,HTTP
AND tried to make documentation and other ways, in the process of learning new things regarding this chat application required concepts 





import socket
import threading
import tkinter as tk
from tkinter import scrolledtext, simpledialog

# GUI setup
class ClientGUI:
    def __init__(self, root, client_socket):
        self.client_socket = client_socket
        self.root = root
        self.root.title("Chat Application")

        self.chat_box = scrolledtext.ScrolledText(self.root)
        self.chat_box.pack(padx=20, pady=5)
        self.chat_box.config(state=tk.DISABLED)

        self.message_entry = tk.Entry(self.root, width=50)
        self.message_entry.pack(padx=20, pady=5)
        self.message_entry.bind("<Return>", self.send_message)

    def send_message(self, event=None):
        message = self.message_entry.get()
        self.client_socket.send(message.encode('utf-8'))
        self.message_entry.delete(0, tk.END)

    def receive_messages(self):
        while True:
            message = self.client_socket.recv(1024).decode('utf-8')
            if message:
                self.chat_box.config(state=tk.NORMAL)
                self.chat_box.insert(tk.END, message + '\n')
                self.chat_box.config(state=tk.DISABLED)
                self.chat_box.yview(tk.END)

def start_client():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect(('localhost', 12345))

    root = tk.Tk()
    gui = ClientGUI(root, client_socket)

    threading.Thread(target=gui.receive_messages).start()

    root.mainloop()

if __name__ == "__main__":
    start_client()







import socket
import threading

# Server setup
def handle_client(client_socket):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                print(f"Received: {message}")
                broadcast(message, client_socket)
            else:
                remove(client_socket)
        except:
            continue

def broadcast(message, connection):
    for client in clients:
        if client != connection:
            try:
                client.send(message.encode('utf-8'))
            except:
                remove(client)

def remove(connection):
    if connection in clients:
        clients.remove(connection)

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(('localhost', 12345))
server.listen(100)

clients = []

print("Server started...")
while True:
    client_socket, addr = server.accept()
    clients.append(client_socket)
    print(f"Connection from {addr}")
    threading.Thread(target=handle_client, args=(client_socket,)).start()
 